import requests

replace_or_add_symbol: str = ":"
mac_address_array_all: list[str] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "A", "B", "C",
                         "D", "E", "F"]

def add(mac_address):
    count: int = 0
    amount_of_times_true: int = 0
    for i in range(len(mac_address)):
        if count == 2:
            mac_address = mac_address[:i + amount_of_times_true] + replace_or_add_symbol + mac_address[i + amount_of_times_true:]
            count = 0
            amount_of_times_true += 1
        count += 1
    return mac_address


def replace(mac_address):
    mac_address_output: str = ""
    for i in range(len(mac_address)):
        if not mac_address[i] in mac_address_array_all:
            mac_address_output = mac_address_output + str(replace_or_add_symbol)
        else:
            mac_address_upper = mac_address[i].upper()
            mac_address_output = mac_address_output + str(mac_address_upper)
    return mac_address_output

def check_mac_address(mac_address):
    if mac_address[2] in mac_address_array_all:  # checks if there is already spacing between every 16bit
        mac_address = add(mac_address)
    else:
        mac_address = replace(mac_address)
    return mac_address


def mac_address_vendor(mac_address_vendor_api_mac_address):  # uses the mac_vendor_api to get the vendor of the mac
    mac_address_vendor_api_url = "https://api.macvendors.com/" + str(mac_address_vendor_api_mac_address)
    mac_address_vendor_api_call = requests.get(mac_address_vendor_api_url)
    return mac_address_vendor_api_call.text , mac_address_vendor_api_call.status_code



def main():
    while True:
        mac_address_input: str = input("\nPlease enter your valid MAC:\n")
        print("\n" * 15)
        mac_address_output: str = check_mac_address(mac_address_input)
        print(mac_address_output)
        vendor, status_code = mac_address_vendor(mac_address_input)
        print(vendor)
        print(f"\n\nmac_address_vendor api_call returned {status_code=}")


if __name__ == "__main__":
    main()
